// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domainrecipe "svc-receipt-luscious/core/domain/recipe"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteRecipe provides a mock function with given fields: ctx, recipeID
func (_m *Repository) DeleteRecipe(ctx context.Context, recipeID string) error {
	ret := _m.Called(ctx, recipeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, recipeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllListRecipe provides a mock function with given fields: recipeName
func (_m *Repository) GetAllListRecipe(recipeName string) ([]domainrecipe.Recipe, error) {
	ret := _m.Called(recipeName)

	var r0 []domainrecipe.Recipe
	if rf, ok := ret.Get(0).(func(string) []domainrecipe.Recipe); ok {
		r0 = rf(recipeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domainrecipe.Recipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(recipeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertRecipe provides a mock function with given fields: ctx, inData
func (_m *Repository) InsertRecipe(ctx context.Context, inData *domainrecipe.Recipe) error {
	ret := _m.Called(ctx, inData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domainrecipe.Recipe) error); ok {
		r0 = rf(ctx, inData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRecipe provides a mock function with given fields: ctx, inData
func (_m *Repository) UpdateRecipe(ctx context.Context, inData *domainrecipe.Recipe) error {
	ret := _m.Called(ctx, inData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domainrecipe.Recipe) error); ok {
		r0 = rf(ctx, inData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
