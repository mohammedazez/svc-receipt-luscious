// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domainingredient "svc-receipt-luscious/core/domain/ingredient"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteIngredient provides a mock function with given fields: ctx, ingredientID
func (_m *Repository) DeleteIngredient(ctx context.Context, ingredientID string) error {
	ret := _m.Called(ctx, ingredientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ingredientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllListIngredient provides a mock function with given fields: ingredientName
func (_m *Repository) GetAllListIngredient(ingredientName string) ([]domainingredient.IngredientService, error) {
	ret := _m.Called(ingredientName)

	var r0 []domainingredient.IngredientService
	if rf, ok := ret.Get(0).(func(string) []domainingredient.IngredientService); ok {
		r0 = rf(ingredientName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domainingredient.IngredientService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ingredientName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertIngredient provides a mock function with given fields: ctx, inData
func (_m *Repository) InsertIngredient(ctx context.Context, inData *domainingredient.IngredientService) error {
	ret := _m.Called(ctx, inData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domainingredient.IngredientService) error); ok {
		r0 = rf(ctx, inData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIngredient provides a mock function with given fields: ctx, inData
func (_m *Repository) UpdateIngredient(ctx context.Context, inData *domainingredient.IngredientService) error {
	ret := _m.Called(ctx, inData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domainingredient.IngredientService) error); ok {
		r0 = rf(ctx, inData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
